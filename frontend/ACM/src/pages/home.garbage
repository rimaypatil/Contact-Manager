create conatact 








import { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { ArrowLeft, User, Mail, Phone, MapPin, Eye, Sparkles, Search, Grid, List } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

interface Contact {
  id: string;
  name: string;
  phone: string;
}

export default function Contacts() {
  const [contacts, setContacts] = useState<Contact[]>([]);
  const [filteredContacts, setFilteredContacts] = useState<Contact[]>([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [isLoading, setIsLoading] = useState(true);

  // One mock contact for testing
  const mockContacts: Contact[] = [
    { id: "1", name: "John Doe", phone: "+1 (555) 123-4567" }
  ];

  useEffect(() => {
    // Simulate loading
    const timer = setTimeout(() => {
      setContacts(mockContacts);
      setFilteredContacts(mockContacts);
      setIsLoading(false);
    }, 500);
    return () => clearTimeout(timer);
  }, []);

  useEffect(() => {
    if (searchQuery.trim()) {
      const filtered = contacts.filter(contact =>
        contact.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        contact.phone.includes(searchQuery)
      );
      setFilteredContacts(filtered);
    } else {
      setFilteredContacts(contacts);
    }
  }, [searchQuery, contacts]);

  const getInitials = (name: string) => {
    return name.split(" ").map(n => n[0]).join("").toUpperCase();
  };

  const getAvatarColor = (name: string) => {
    const colors = [
      "bg-gradient-to-r from-purple-500 to-pink-500",
      "bg-gradient-to-r from-blue-500 to-cyan-500",
      "bg-gradient-to-r from-green-500 to-emerald-500",
      "bg-gradient-to-r from-orange-500 to-red-500",
      "bg-gradient-to-r from-indigo-500 to-purple-500",
      "bg-gradient-to-r from-pink-500 to-rose-500",
    ];
    const index = name.charCodeAt(0) % colors.length;
    return colors[index];
  };

  return (
    <div className="min-h-screen relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-cyan-500/30 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-purple-500/30 rounded-full blur-3xl animate-pulse delay-1000"></div>
      </div>

      <div className="relative z-10">
        {/* Navigation Header */}
        <nav className="glass-card m-6 rounded-2xl p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Link to="/">
                <Button variant="ghost" size="sm" className="text-white/80 hover:text-white hover:bg-white/10">
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  Back to Home
                </Button>
              </Link>

            </div>
            <Link to="/create">
              <Button size="sm" className="glow-button">
                Add New Contact
              </Button>
            </Link>
          </div>
        </nav>

        {/* Main Content */}
        <div className="container mx-auto px-6 py-12">
          {/* Header */}
          <div className="text-center mb-12">
            <h1 className="text-5xl font-bold mb-4">
              <span className="text-white">Your</span>
              <br />
              <span className="gradient-text">Contact List</span>
            </h1>
            <p className="text-xl text-white/70">
              {isLoading ? "Loading your contacts..." : `${filteredContacts.length} contacts in your collection`}
            </p>
          </div>

          {/* Search and Controls */}
          <div className="max-w-4xl mx-auto mb-12">
            <Card className="glass-card floating-card border-0 p-6">
              <CardContent className="p-0">
                <div className="flex flex-col md:flex-row gap-4 items-center">
                  {/* Search */}
                  <div className="relative flex-1">
                    <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-white/50 w-5 h-5" />
                    <Input
                      type="text"
                      placeholder="Search contacts..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="pl-12 bg-white/5 border-white/20 text-white placeholder:text-white/50 focus:ring-2 focus:ring-primary/50 focus:border-primary/50 h-12 rounded-xl"
                    />
                  </div>

                  {/* View Toggle */}
                  <div className="flex bg-white/5 rounded-xl p-1 border border-white/20">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setViewMode("grid")}
                      className={`rounded-lg ${viewMode === "grid" ? "bg-primary text-white" : "text-white/70 hover:text-white hover:bg-white/10"}`}
                    >
                      <Grid className="w-4 h-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setViewMode("list")}
                      className={`rounded-lg ${viewMode === "list" ? "bg-primary text-white" : "text-white/70 hover:text-white hover:bg-white/10"}`}
                    >
                      <List className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Contacts Grid/List */}
          {isLoading ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto">
              {[...Array(6)].map((_, i) => (
                <Card key={i} className="glass-card animate-pulse">
                  <CardContent className="p-6">
                    <div className="flex items-center space-x-4 mb-4">
                      <div className="w-12 h-12 bg-white/20 rounded-full"></div>
                      <div className="space-y-2 flex-1">
                        <div className="h-4 bg-white/20 rounded w-3/4"></div>
                        <div className="h-3 bg-white/20 rounded w-1/2"></div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : filteredContacts.length === 0 ? (
            <div className="text-center py-16">
              <div className="w-24 h-24 bg-white/10 rounded-full mx-auto mb-6 flex items-center justify-center">
                <User className="w-12 h-12 text-white/50" />
              </div>
              <h3 className="text-2xl font-bold text-white mb-2">No contacts found</h3>
              <p className="text-white/70 mb-6">
                {searchQuery ? "Try adjusting your search criteria" : "Start by adding your first contact"}
              </p>
              <Link to="/create">
                <Button className="glow-button">Add Your First Contact</Button>
              </Link>
            </div>
          ) : (
            <div className={`max-w-6xl mx-auto ${
              viewMode === "grid" 
                ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" 
                : "space-y-4"
            }`}>
              {filteredContacts.map((contact) => (
                <Link key={contact.id} to={`/contact/${contact.id}`}>
                  <Card className="glass-card floating-card border-0 cursor-pointer group">
                    <CardContent className={`p-6 ${viewMode === "list" ? "flex items-center space-x-6" : ""}`}>
                      {/* Avatar */}
                      <div className={`${viewMode === "list" ? "flex-shrink-0" : "mb-4"}`}>
                        <Avatar className={`${viewMode === "list" ? "w-16 h-16" : "w-20 h-20"} mx-auto`}>
                          <AvatarFallback className={`${getAvatarColor(contact.name)} text-white font-bold text-lg`}>
                            {getInitials(contact.name)}
                          </AvatarFallback>
                        </Avatar>
                      </div>

                      {/* Contact Info */}
                      <div className={`${viewMode === "list" ? "flex-1 min-w-0" : "text-center"}`}>
                        <h3 className="text-xl font-bold text-white mb-2 group-hover:text-primary transition-colors">
                          {contact.name}
                        </h3>
                        
                        <div className={`space-y-2 ${viewMode === "list" ? "text-left" : ""}`}>
                          <div className="flex items-center gap-2 text-white/70">
                            <Phone className="w-4 h-4 text-primary flex-shrink-0" />
                            <span>{contact.phone}</span>
                          </div>
                        </div>
                      </div>

                      {/* Action Button */}
                      {viewMode === "list" && (
                        <div className="flex-shrink-0">
                          <Button size="sm" variant="ghost" className="text-white/70 hover:text-white hover:bg-white/10">
                            <Eye className="w-4 h-4" />
                          </Button>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </Link>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}




import { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { Search, Users, UserPlus, Sparkles, ArrowRight } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";

export default function Index() {
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState<string[]>([]);
  const [isSearching, setIsSearching] = useState(false);

  // Mock search functionality
  const mockContacts = [
    "John Doe", "Jane Smith", "Michael Johnson", "Sarah Wilson", 
    "David Brown", "Lisa Garcia", "Robert Martinez", "Emily Davis"
  ];

  useEffect(() => {
    if (searchQuery.trim()) {
      setIsSearching(true);
      const timer = setTimeout(() => {
        const filtered = mockContacts.filter(contact =>
          contact.toLowerCase().includes(searchQuery.toLowerCase())
        );
        setSearchResults(filtered);
        setIsSearching(false);
      }, 300);
      return () => clearTimeout(timer);
    } else {
      setSearchResults([]);
    }
  }, [searchQuery]);

  return (
    <div className="min-h-screen relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-purple-500/30 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-500/30 rounded-full blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/2 w-60 h-60 bg-pink-500/20 rounded-full blur-3xl animate-pulse delay-500"></div>
      </div>

      <div className="relative z-10">
        {/* Navigation Header */}
        <nav className="glass-card m-6 rounded-2xl p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-gradient-to-r from-primary to-purple-600 rounded-lg flex items-center justify-center">
                <Sparkles className="w-5 h-5 text-white" />
              </div>
              <span className="text-xl font-bold gradient-text">ContactHub</span>
            </div>
            <div className="flex items-center space-x-4">
              <Link to="/contacts">
                <Button variant="ghost" size="sm" className="text-white/80 hover:text-white hover:bg-white/10">
                  <Users className="w-4 h-4 mr-2" />
                  All Contacts
                </Button>
              </Link>
              <Link to="/create">
                <Button size="sm" className="glow-button">
                  <UserPlus className="w-4 h-4 mr-2" />
                  Add Contact
                </Button>
              </Link>
            </div>
          </div>
        </nav>

        {/* Main Content */}
        <div className="container mx-auto px-6 py-12">
          <div className="text-center mb-16">
            <h1 className="text-6xl md:text-7xl font-bold mb-6">
              <span className="gradient-text"></span>
              <br />
              <span className="text-white">Contact Management</span>
            </h1>
            <p className="text-xl text-white/70 max-w-2xl mx-auto leading-relaxed">
              Manage your contacts with style. Search, organize, and connect with 
              the most beautiful contact management experience.
            </p>
          </div>

          {/* Search Section */}
          <div className="max-w-2xl mx-auto mb-16">
            <Card className="glass-card floating-card border-0 p-8">
              <CardContent className="p-0">
                <div className="relative">
                  <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-white/50 w-5 h-5" />
                  <Input
                    type="text"
                    placeholder="Search your contacts..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-12 pr-4 py-6 text-lg bg-white/5 border-white/20 text-white placeholder:text-white/50 focus:ring-2 focus:ring-primary/50 focus:border-primary/50 rounded-xl"
                  />
                </div>

                {/* Search Results */}
                {searchQuery && (
                  <div className="mt-6 space-y-3">
                    {isSearching ? (
                      <div className="text-center py-8">
                        <div className="inline-block w-6 h-6 border-2 border-primary border-t-transparent rounded-full animate-spin"></div>
                        <p className="text-white/70 mt-2">Searching...</p>
                      </div>
                    ) : searchResults.length > 0 ? (
                      <div className="space-y-2">
                        <p className="text-white/70 text-sm mb-3">Found {searchResults.length} contacts</p>
                        {searchResults.map((contact, index) => (
                          <div
                            key={index}
                            className="flex items-center justify-between p-4 bg-white/5 rounded-lg hover:bg-white/10 transition-colors cursor-pointer group"
                          >
                            <span className="text-white font-medium">{contact}</span>
                            <ArrowRight className="w-4 h-4 text-white/50 group-hover:text-white transition-colors" />
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-8">
                        <p className="text-red-400 italic">No contacts found</p>
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Action Cards */}
          <div className="grid md:grid-cols-2 gap-8 max-w-4xl mx-auto">
            <Link to="/contacts">
              <Card className="glass-card floating-card border-0 p-8 cursor-pointer group">
                <CardContent className="p-0 text-center">
                  <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-2xl mx-auto mb-6 flex items-center justify-center group-hover:scale-110 transition-transform">
                    <Users className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="text-2xl font-bold text-white mb-3">View All Contacts</h3>
                  <p className="text-white/70 leading-relaxed">
                    Browse through your entire contact list with our beautiful card interface
                  </p>
                </CardContent>
              </Card>
            </Link>

            <Link to="/create">
              <Card className="glass-card floating-card border-0 p-8 cursor-pointer group">
                <CardContent className="p-0 text-center">
                  <div className="w-16 h-16 bg-gradient-to-r from-purple-500 to-pink-500 rounded-2xl mx-auto mb-6 flex items-center justify-center group-hover:scale-110 transition-transform">
                    <UserPlus className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="text-2xl font-bold text-white mb-3">Add New Contact</h3>
                  <p className="text-white/70 leading-relaxed">
                    Create new contacts with our streamlined and intuitive form
                  </p>
                </CardContent>
              </Card>
            </Link>
          </div>

          {/* Stats Section */}
          <div className="mt-20 text-center">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto">
              {[
                { number: "500+", label: "Contacts Managed" },
                { number: "99.9%", label: "Uptime" },
                { number: "24/7", label: "Support" }
              ].map((stat, index) => (
                <div key={index} className="glass-card p-6 rounded-xl floating-card">
                  <div className="text-3xl font-bold gradient-text mb-2">{stat.number}</div>
                  <div className="text-white/70">{stat.label}</div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}




import { useState, useEffect } from "react";
import { Link, useParams, useNavigate } from "react-router-dom";
import { ArrowLeft, User, Mail, Phone, MapPin, Edit, Trash2, Save, X, Sparkles } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";

interface Contact {
  id: string;
  name: string;
  phone: string;
}

export default function ContactDetails() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  
  const [contact, setContact] = useState<Contact | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  
  const [editData, setEditData] = useState({
    name: "",
    phone: ""
  });

  // One mock contact for testing
  const mockContacts: Contact[] = [
    { id: "1", name: "John Doe", phone: "+1 (555) 123-4567" }
  ];

  useEffect(() => {
    // Simulate loading contact
    const timer = setTimeout(() => {
      const foundContact = mockContacts.find(c => c.id === id);
      if (foundContact) {
        setContact(foundContact);
        setEditData({
          name: foundContact.name,
          phone: foundContact.phone
        });
      }
      setIsLoading(false);
    }, 800);
    return () => clearTimeout(timer);
  }, [id]);

  const getInitials = (name: string) => {
    return name.split(" ").map(n => n[0]).join("").toUpperCase();
  };

  const getAvatarColor = (name: string) => {
    const colors = [
      "bg-gradient-to-r from-purple-500 to-pink-500",
      "bg-gradient-to-r from-blue-500 to-cyan-500",
      "bg-gradient-to-r from-green-500 to-emerald-500",
      "bg-gradient-to-r from-orange-500 to-red-500",
      "bg-gradient-to-r from-indigo-500 to-purple-500",
      "bg-gradient-to-r from-pink-500 to-rose-500",
    ];
    const index = name.charCodeAt(0) % colors.length;
    return colors[index];
  };

  const handleEdit = () => {
    setIsEditing(true);
  };

  const handleCancelEdit = () => {
    if (contact) {
      setEditData({
        name: contact.name,
        phone: contact.phone
      });
    }
    setIsEditing(false);
  };

  const handleSave = async () => {
    setIsSaving(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Update contact
      const updatedContact = { ...contact!, ...editData };
      setContact(updatedContact);
      setIsEditing(false);
      
      toast.success("Contact updated successfully!", {
        description: "Your changes have been saved.",
      });
    } catch (error) {
      toast.error("Failed to update contact", {
        description: "Please try again.",
      });
    } finally {
      setIsSaving(false);
    }
  };

  const handleDelete = async () => {
    setIsDeleting(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      toast.success("Contact deleted successfully!", {
        description: "The contact has been removed from your list.",
      });
      
      // Navigate back after a short delay
      setTimeout(() => {
        navigate("/contacts");
      }, 1500);
    } catch (error) {
      toast.error("Failed to delete contact", {
        description: "Please try again.",
      });
      setIsDeleting(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setEditData(prev => ({ ...prev, [name]: value }));
  };

  if (isLoading) {
    return (
      <div className="min-h-screen relative overflow-hidden">
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute -top-40 -right-40 w-80 h-80 bg-blue-500/30 rounded-full blur-3xl animate-pulse"></div>
          <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-purple-500/30 rounded-full blur-3xl animate-pulse delay-1000"></div>
        </div>
        
        <div className="relative z-10 flex items-center justify-center min-h-screen">
          <div className="text-center">
            <div className="w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-white/70 text-lg">Loading contact details...</p>
          </div>
        </div>
      </div>
    );
  }

  if (!contact) {
    return (
      <div className="min-h-screen relative overflow-hidden">
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute -top-40 -right-40 w-80 h-80 bg-red-500/30 rounded-full blur-3xl animate-pulse"></div>
          <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-orange-500/30 rounded-full blur-3xl animate-pulse delay-1000"></div>
        </div>
        
        <div className="relative z-10 flex items-center justify-center min-h-screen">
          <div className="text-center">
            <div className="w-24 h-24 bg-white/10 rounded-full mx-auto mb-6 flex items-center justify-center">
              <User className="w-12 h-12 text-white/50" />
            </div>
            <h2 className="text-3xl font-bold text-white mb-4">Contact Not Found</h2>
            <p className="text-white/70 mb-6">The contact you're looking for doesn't exist.</p>
            <Link to="/contacts">
              <Button className="glow-button">Back to Contacts</Button>
            </Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-blue-500/30 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-purple-500/30 rounded-full blur-3xl animate-pulse delay-1000"></div>
      </div>

      <div className="relative z-10">
        {/* Navigation Header */}
        <nav className="glass-card m-6 rounded-2xl p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Link to="/contacts">
                <Button variant="ghost" size="sm" className="text-white/80 hover:text-white hover:bg-white/10">
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  Back to Contacts
                </Button>
              </Link>
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-gradient-to-r from-primary to-purple-600 rounded-lg flex items-center justify-center">
                  <Sparkles className="w-5 h-5 text-white" />
                </div>
                <span className="text-xl font-bold gradient-text">ContactHub</span>
              </div>
            </div>
            <Link to="/create">
              <Button size="sm" className="glow-button">
                Add New Contact
              </Button>
            </Link>
          </div>
        </nav>

        {/* Main Content */}
        <div className="container mx-auto px-6 py-12">
          <div className="max-w-4xl mx-auto">
            {/* Header with Avatar */}
            <div className="text-center mb-12">
              <Avatar className="w-32 h-32 mx-auto mb-6">
                <AvatarFallback className={`${getAvatarColor(contact.name)} text-white font-bold text-3xl`}>
                  {getInitials(contact.name)}
                </AvatarFallback>
              </Avatar>
              <h1 className="text-5xl font-bold mb-4">
                <span className="text-white">{contact.name}</span>
              </h1>
              <p className="text-xl text-white/70">Contact Details</p>
            </div>

            {/* Contact Information Card */}
            <Card className="glass-card floating-card border-0 mb-8">
              <CardHeader className="pb-6">
                <CardTitle className="text-2xl text-white flex items-center justify-between">
                  <span className="flex items-center gap-3">
                    <User className="w-6 h-6 text-primary" />
                    Contact Information
                  </span>
                  
                  {!isEditing && (
                    <div className="flex gap-2">
                      <Button
                        onClick={handleEdit}
                        size="sm"
                        variant="ghost"
                        className="text-white/80 hover:text-white hover:bg-white/10"
                      >
                        <Edit className="w-4 h-4 mr-2" />
                        Edit
                      </Button>
                      
                      <AlertDialog>
                        <AlertDialogTrigger asChild>
                          <Button
                            size="sm"
                            variant="ghost"
                            className="text-red-400 hover:text-red-300 hover:bg-red-500/10"
                          >
                            <Trash2 className="w-4 h-4 mr-2" />
                            Delete
                          </Button>
                        </AlertDialogTrigger>
                        <AlertDialogContent className="glass-card border-0">
                          <AlertDialogHeader>
                            <AlertDialogTitle className="text-white">Delete Contact</AlertDialogTitle>
                            <AlertDialogDescription className="text-white/70">
                              Are you sure you want to delete {contact.name}? This action cannot be undone.
                            </AlertDialogDescription>
                          </AlertDialogHeader>
                          <AlertDialogFooter>
                            <AlertDialogCancel className="bg-white/10 border-white/20 text-white hover:bg-white/20">
                              Cancel
                            </AlertDialogCancel>
                            <AlertDialogAction
                              onClick={handleDelete}
                              disabled={isDeleting}
                              className="bg-red-500 hover:bg-red-600 text-white"
                            >
                              {isDeleting ? (
                                <div className="flex items-center gap-2">
                                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                                  Deleting...
                                </div>
                              ) : (
                                "Delete"
                              )}
                            </AlertDialogAction>
                          </AlertDialogFooter>
                        </AlertDialogContent>
                      </AlertDialog>
                    </div>
                  )}
                </CardTitle>
              </CardHeader>
              
              <CardContent>
                {isEditing ? (
                  /* Edit Form */
                  <div className="space-y-6">
                    <div className="space-y-3">
                      <Label htmlFor="name" className="text-white font-medium flex items-center gap-2">
                        <User className="w-4 h-4 text-primary" />
                        Full Name
                      </Label>
                      <Input
                        id="name"
                        name="name"
                        value={editData.name}
                        onChange={handleChange}
                        className="bg-white/5 border-white/20 text-white placeholder:text-white/50 focus:ring-2 focus:ring-primary/50 focus:border-primary/50 h-12 text-lg rounded-xl"
                      />
                    </div>

                    <div className="space-y-3">
                      <Label htmlFor="email" className="text-white font-medium flex items-center gap-2">
                        <Mail className="w-4 h-4 text-primary" />
                        Email Address
                      </Label>
                      <Input
                        id="email"
                        name="email"
                        type="email"
                        value={editData.email}
                        onChange={handleChange}
                        className="bg-white/5 border-white/20 text-white placeholder:text-white/50 focus:ring-2 focus:ring-primary/50 focus:border-primary/50 h-12 text-lg rounded-xl"
                      />
                    </div>

                    <div className="space-y-3">
                      <Label htmlFor="phone" className="text-white font-medium flex items-center gap-2">
                        <Phone className="w-4 h-4 text-primary" />
                        Phone Number
                      </Label>
                      <Input
                        id="phone"
                        name="phone"
                        value={editData.phone}
                        onChange={handleChange}
                        className="bg-white/5 border-white/20 text-white placeholder:text-white/50 focus:ring-2 focus:ring-primary/50 focus:border-primary/50 h-12 text-lg rounded-xl"
                      />
                    </div>

                    <div className="space-y-3">
                      <Label htmlFor="address" className="text-white font-medium flex items-center gap-2">
                        <MapPin className="w-4 h-4 text-primary" />
                        Address
                      </Label>
                      <Input
                        id="address"
                        name="address"
                        value={editData.address}
                        onChange={handleChange}
                        className="bg-white/5 border-white/20 text-white placeholder:text-white/50 focus:ring-2 focus:ring-primary/50 focus:border-primary/50 h-12 text-lg rounded-xl"
                      />
                    </div>

                    <div className="flex gap-4 pt-4">
                      <Button
                        onClick={handleSave}
                        disabled={isSaving}
                        className="flex-1 glow-button h-12"
                      >
                        {isSaving ? (
                          <div className="flex items-center gap-2">
                            <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                            Saving...
                          </div>
                        ) : (
                          <div className="flex items-center gap-2">
                            <Save className="w-4 h-4" />
                            Save Changes
                          </div>
                        )}
                      </Button>
                      <Button
                        onClick={handleCancelEdit}
                        variant="ghost"
                        className="flex-1 h-12 bg-white/10 border border-white/20 text-white hover:bg-white/20"
                      >
                        <X className="w-4 h-4 mr-2" />
                        Cancel
                      </Button>
                    </div>
                  </div>
                ) : (
                  /* Display Mode */
                  <div className="space-y-6">
                    <div className="flex items-center gap-4 p-4 bg-white/5 rounded-xl">
                      <User className="w-6 h-6 text-primary" />
                      <div>
                        <p className="text-white/70 text-sm">Full Name</p>
                        <p className="text-white text-lg font-medium">{contact.name}</p>
                      </div>
                    </div>

                    <div className="flex items-center gap-4 p-4 bg-white/5 rounded-xl">
                      <Mail className="w-6 h-6 text-primary" />
                      <div>
                        <p className="text-white/70 text-sm">Email Address</p>
                        <p className="text-white text-lg font-medium">{contact.email}</p>
                      </div>
                    </div>

                    <div className="flex items-center gap-4 p-4 bg-white/5 rounded-xl">
                      <Phone className="w-6 h-6 text-primary" />
                      <div>
                        <p className="text-white/70 text-sm">Phone Number</p>
                        <p className="text-white text-lg font-medium">{contact.phone}</p>
                      </div>
                    </div>

                    {contact.address && (
                      <div className="flex items-center gap-4 p-4 bg-white/5 rounded-xl">
                        <MapPin className="w-6 h-6 text-primary" />
                        <div>
                          <p className="text-white/70 text-sm">Address</p>
                          <p className="text-white text-lg font-medium">{contact.address}</p>
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
